import 'dart:math';
import 'dart:typed_data';

import 'package:ostorlab_insecure_flutter_app/bug_rule.dart';

/// A [BugRule] implementation that triggers the use of insecure random number generators.
class InsecureRandom extends BugRule {
  /// The tag used to identify instances of this rule.
  static const String _tag = "InsecureRandom";

  /// The seed value used for the insecure random number generator.
  static const SEED = 12345;

  /// The length of the random bytes generated by the cryptographically secure random number generator.
  static const LENGTH = 64;

  /// Returns a description of this [BugRule] implementation.
  @override
  String get description => 'The application uses insecure random number generators, which can lead to security vulnerabilities and should be replaced with cryptographically secure alternatives.';

  /// Triggers the bug rule by using an insecure random number generator and a cryptographically secure random number generator.
  @override
  Future<void> run(String input) async {
    // Define a random number generator with an insecure seed value
    final gen1 = Random(SEED);

    // Define a cryptographically secure random number generator
    final gen2 = Random.secure();

    // Generate some random bytes using the insecure random number generator
    Uint8List insecureBytes = Uint8List(LENGTH);
    for (int i = 0; i < LENGTH; i++) {
      insecureBytes[i] = gen1.nextInt(256);
    }

    // Generate some random bytes using the cryptographically secure random number generator
    Uint8List secureBytes = Uint8List(LENGTH);
    for (int i = 0; i < LENGTH; i++) {
      secureBytes[i] = gen2.nextInt(256);
    }

    // Print the generated bytes
    print('${_tag}: Insecure bytes: ${insecureBytes.toString()}');
    print('${_tag}: Secure bytes: ${secureBytes.toString()}');
  }
}
